on:
  push:
    branches:
      - main
    # paths:
    # - 'apps/hello-app/**'

env:
  PROJECT_ID: "deployment-demo-311509"
  IMAGE: hello-app
  TAG: v1
  GKE_CLUSTER: deployment-demo-311509-gke   # Add your cluster name here.
  GKE_ZONE: europe-central2-a  # Add your cluster zone here.
  DEPLOYMENT_NAME: hello-app # Add your deployment name here.

jobs:
  setup-build-publish:
    name: Setup, Build and Publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud --quiet auth configure-docker

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --file apps/hello-app/Dockerfile .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$TAG"
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Kustomize
      run: |-
        cd ./manifests/
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set GKE credentials
      uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GCLOUD_SERVICE_KEY }}

    # - name: Deploy
    #   run: |-
    #     # kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     # kubectl get services -o wide
    #     kubectl create deployment hello-app --image=gcr.io/${PROJECT_ID}/hello-app:v1
    #     kubectl get pods
    #     kubectl expose deployment hello-app --name=hello-app-service --type=LoadBalancer --port 80 --target-port 8080
    #     kubectl get service
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        cd manifests/
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$TAG
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
    - name: Check status
      run: |-
        kubectl get deployments
        kubectl get services -o wide
